<template>
  
  <div id="container">


  </div>

</template>

<script>

import * as Three from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import Stats from 'three/examples/js/libs/stats.min.js';


export default {
  name: 'HelloPrime',

  data(){
    return{
      scene: null,
      camera: null,
      renderer: null,
      mouse:new Three.Vector2(),
      rayCaster:new Three.Raycaster(),
      stats:null,
      galaxyMesh:null,
    }
  },
  methods:{

    init: function() {

      //all the initialisation
      this.scene = new Three.Scene();
      let container = document.getElementById('container');

      //ambient light
      const aL = new Three.AmbientLight(0xffffff,1);
      this.scene.add(aL);

    
      //camera
      this.camera = new Three.PerspectiveCamera(75,container.clientWidth/container.clientHeight,0.1,1000);
      this.camera.position.x = 0
      this.camera.position.y = 10
      this.camera.position.z = 0
      this.camera.lookAt(0, 0, 0)

      //renderer
      //this.renderer = new Three.WebGLRenderer({powerPreference: "high-performance",antialias: true});
      this.renderer = new Three.WebGLRenderer({powerPreference: "high-performance", antialias: false, stencil: false, depth: false});
  
      this.renderer.setSize(container.clientWidth, container.clientHeight);
      this.renderer.setClearColor(0xffffff, 0);
      container.appendChild(this.renderer.domElement);

      this.controls = new OrbitControls(this.camera, this.renderer.domElement)
      this.controls.enableDamping = true;
      this.controls.dampingFactor = 0.05;
      this.controls.enableZoom = true;
      this.controls.update();

      this.stats = new Stats()
      container.appendChild( this.stats.dom );

      const commonCylinderGeometry = new Three.BoxGeometry( 20, 10,20 );
                                                                      //1, 1, 20, 12, 0, true

      const darkCylinderTexture = new Three.TextureLoader().load('/textures/galaxy.jpg')
      darkCylinderTexture.wrapS = Three.RepeatWrapping
      darkCylinderTexture.wrapT = Three.MirroredRepeatWrapping
      darkCylinderTexture.repeat.set(1, 1)

      const darkCylinderMaterial = new Three.MeshLambertMaterial({
          side: Three.BackSide,
          map: darkCylinderTexture,
          //blending: Three.AdditiveBlending,
          opacity: 0.4
      })
      this.galaxyMesh = new Three.Mesh(commonCylinderGeometry, darkCylinderMaterial)
      this.scene.add(this.galaxyMesh)

    },
    resizeRenderer: function() {
      let container = document.getElementById('container');
      this.renderer.setSize(container.clientWidth, container.clientHeight);
      this.camera.aspect = container.clientWidth/container.clientHeight;
      this.camera.updateProjectionMatrix();
    },
    animate: function() {
      requestAnimationFrame(this.animate);
      this.stats.begin();
      this.renderer.render(this.scene, this.camera);
			this.stats.end();

    },

  },
  mounted(){
      this.init();
      this.animate();
      window.addEventListener('resize', this.resizeRenderer)
  },

}
</script>
